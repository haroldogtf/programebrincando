options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(ProgrameBrincandoParser)

package plp.programebrincando.parser;

import plp.programebrincando.*;
import plp.programebrincando.expression.*;
import plp.programebrincando.util.*;

public class ProgrameBrincandoParser
{
  public static void main(String args []) throws ParseException
  {
    ProgrameBrincandoParser parser;
    if (args.length == 0)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Reading from standard input . . .");
      parser = new ProgrameBrincandoParser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Reading from file " + args [0] + " . . .");
      try
      {
        parser = new ProgrameBrincandoParser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Java Parser Version 1.0.2:  File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Usage is one of:");
      System.out.println("         java ProgrameBrincandoParser < inputfile");
      System.out.println("OR");
      System.out.println("         java ProgrameBrincandoParser inputfile");
      return;
    }
    try
    {
      Programa programa = parser.entrada();
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  ProgrameBrincando program parsed successfully.");
//      if (!programa.checaTipo())//      {//        System.out.println("Erro de tipo");//      }//      else//      {//        programa.executar();//      }//        programa.executar();
    }
    catch (ParseException e)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Encountered errors during parse.");
    }
  }
}

PARSER_END(ProgrameBrincandoParser)

SKIP : /* WHITE SPACE */
{
  	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
	| "\r\n"
}

TOKEN : /* PRIMITIVES */
{
	< INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  	| < HEX_LITERAL > ([ "l", "L" ])?
  	| < OCTAL_LITERAL > ([ "l", "L" ])? >
	| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
	| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
	| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
	| < STRING_LITERAL :
	    "\""
	    (
	      (~[ "\"", "\\", "\n", "\r" ])
	    |
	      (
	        "\\"
	        (
	          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
	        | [ "0"-"7" ] ([ "0"-"7" ])?
	        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
	        )
	      )
	    )*
	    "\"" >
	| < TRUE  : "VERDADEIRO" >
	| < FALSE : "FALSO" >
}

TOKEN : /* EXPRESSIONS OPERATORS */
{
	  < PLUS  : "+" >
	| < EQUAL : "==" >
	| < GT    : ">" >
	| < LT    : "<" >
	| < GTE   : ">=" >
	| < LTE   : "<=" >
	| < UNION : "JUNTA" >
	| < NOT   : "NAO" >
}

TOKEN : /* PROGRAMEBRINCANDO LANGUAGE */
{
	  < LEARN       : "APRENDA" >
	| < ENDLEARN    : "FIMAPRENDA" >
	| < REPEAT      : "REPETIR" >
	| < TIMES       : "VEZES" >
	| < ENDREPEAT   : "FIMREPETIR" >
	| < IF          : "SE" >
	| < THEN        : "FACA" >
	| < ELSE        : "SENAOFACA" >
	| < ENDIF       : "FIMSE" >
	| < FORWARD     : "PARAFRENTE" > 
	| < BACK 	    : "PARATRAS" > 
	| < RIGHT       : "GIRARDIREITA" > 
	| < LEFT        : "GIRARESQUERDA" > 
	| < SETPENCOLOR : "CORCANETA" >
	| < SETPENUSE   : "USARCANETA" >
	| < COLOR  	    : "COR" >
	| < DRAW  	    : "DESENHE" >
}

TOKEN : /* SEPARATORS */
{
	  < LPAREN : "(" >
	| < RPAREN : ")" >
	| < COMMA  : "," >
	| < SEMICOLON  : ";" >
}

Programa entrada() :
{
  Programa retorno;
}
{
  retorno = PPrograma() < EOF >
  {
    return retorno;
  }
}

Programa PPrograma() :
{
  Expressao retorno;
}
{
  retorno = PExpressao()
  {
    return new Programa(retorno);
  }
}

Expressao PExpressao() :
{
	Expressao retorno;  
}
{
 	(
		LOOKAHEAD (PExpressaoSimples() <SEMICOLON>)
		retorno = PSequenciaExpressao()
	   	|
      	retorno = PExpressaoSimples()
 	)
	{		return retorno;
	}}

SequenciaExpressao PSequenciaExpressao() :
{
	Expressao expressao1 = null;  
	Expressao expressao2 = null;  
}
{
	expressao1 = PExpressaoSimples()
	<SEMICOLON>
	expressao2 = PExpressao()

	{
		return new SequenciaExpressao(expressao1, expressao2);
	}
}

Expressao PExpressaoSimples() :
{
	Expressao retorno;
}
{
    (
    	retorno = PValor()
      	|
      	retorno = PExpressaoUnaria()
   	)
    {
        return retorno;
    }
}

Valor PValor():
{
	Valor retorno;}
{
	retorno = PValorConcreto()
	{
		return retorno;	  	}}

Valor PValorConcreto() :
{	Valor retorno;
}
{
	(		retorno = PValorInteiro()
		|
		retorno = PValorBooleano()
		|
		retorno = PValorCor()
	)
	{
	  return retorno;	}
}

Valor PValorInteiro():
{
	Token token;
}
{
	token = <INTEGER_LITERAL>
	{
		return new ValorInteiro(Integer.parseInt(token.toString()));
	}
}

Valor PValorBooleano() :
{
}
{
	<FALSE> { return new ValorBooleano(false); } 
	|
	<TRUE>  { return new ValorBooleano(true); }
}

Valor PValorCor() :
{
	Token token1;  	Token token2;  	Token token3;  }
{
	
	<COLOR>
	<LPAREN>
	token1 = <INTEGER_LITERAL>
	<COMMA>
	token2 = <INTEGER_LITERAL>
	<COMMA>
	token3 = <INTEGER_LITERAL>
	<RPAREN>

	{	  return new ValorCor(Integer.parseInt(token1.toString()), Integer.parseInt(token2.toString()), Integer.parseInt(token3.toString()));
	}   }

Expressao PExpressaoUnaria() :
{
  	Expressao retorno;
}
{
	retorno = PAcao()	
  {
    return new Acao();
  }
}

Expressao PAcao() :
{
 	Expressao retorno = null;
	Valor valor;
}
{
	(
		< FORWARD >
		valor = PValorInteiro()
		{
			retorno = new ForwardMovement(valor);
		}
		|
		< BACK >
		valor = PValorInteiro()
		{
			retorno = new BackMovement(valor);
		}
		|
		< RIGHT >
		valor = PValorInteiro()
		{
			retorno = new RightMovement(valor);
		}
		|
		< LEFT >
		valor = PValorInteiro()
		{
			retorno = new LeftMovement(valor);
		}
		|
		< SETPENCOLOR >
		valor = PValorCor()
		{
			retorno = new SetPenColor(valor);
		}
		|
		< SETPENUSE >
		valor = PValorBooleano()
		{
			retorno = new SetPenUse(valor);
		}
	)
	{	    return retorno;
	}
}
options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(ProgrameBrincandoParser)

package plp.programebrincando.parser;

import plp.programebrincando.*;
import plp.programebrincando.expression.*;
import plp.programebrincando.util.*;

public class ProgrameBrincandoParser
{
  public static void main(String args []) throws ParseException
  {
    ProgrameBrincandoParser parser;
    if (args.length == 0)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Reading from standard input . . .");
      parser = new ProgrameBrincandoParser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Reading from file " + args [0] + " . . .");
      try
      {
        parser = new ProgrameBrincandoParser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Java Parser Version 1.0.2:  File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Usage is one of:");
      System.out.println("         java ProgrameBrincandoParser < inputfile");
      System.out.println("OR");
      System.out.println("         java ProgrameBrincandoParser inputfile");
      return;
    }
    try
    {
      Programa programa = parser.entrada();
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  ProgrameBrincando program parsed successfully.");
//      if (!programa.checaTipo())//      {//        System.out.println("Erro de tipo");//      }//      else//      {//        programa.executar();//      }//        programa.executar();
    }
    catch (ParseException e)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Encountered errors during parse.");
    }
  }
}

PARSER_END(ProgrameBrincandoParser)

SKIP : /* WHITE SPACE */
{
	  " "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /* PRIMITIVES */
{
	  < BLACK : "PRETO" > 
	| < RED   : "VERMELHO" > 
	| < GREEN : "VERDE" > 
	| < BLUE  : "AZUL" > 
	| < TRUE  : "VERDADEIRO" >
	| < FALSE : "FALSO" >
}

TOKEN : /* DIGIT AND LITERAL */
{
	< INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  	| < HEX_LITERAL > ([ "l", "L" ])?
  	| < OCTAL_LITERAL > ([ "l", "L" ])? >
	| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
	| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
	| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
	| < STRING_LITERAL :
	    "\""
	    (
	      (~[ "\"", "\\", "\n", "\r" ])
	    |
	      (
	        "\\"
	        (
	          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
	        | [ "0"-"7" ] ([ "0"-"7" ])?
	        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
	        )
	      )
	    )*
	    "\"" >
}

TOKEN : /* EXPRESSIONS OPERATORS */
{
	  < PLUS  : "+" >
	| < EQUAL : "==" >
	| < GT    : ">" >
	| < LT    : "<" >
	| < GTE   : ">=" >
	| < LTE   : "<=" >
	| < UNION : "JUNTA" >
	| < NOT : "NAO" >
}

TOKEN : /* PROGRAMEBRINCANDO LANGUAGE */
{
	  < LEARN       : "APRENDA" >
	| < ENDLEARN    : "FIMAPRENDA" >
	| < REPEAT      : "REPETIR" >
	| < TIMES       : "VEZES" >
	| < ENDREPEAT   : "FIMREPETIR" >
	| < IF          : "SE" >
	| < THEN        : "FACA" >
	| < ELSE        : "SENAOFACA" >
	| < ENDIF       : "FIMSE" >
	| < FORWARD      : "PARAFRENTE" > 
	| < BACK 	    : "PARATRAS" > 
	| < RIGHT       : "GIRARDIREITA" > 
	| < LEFT        : "GIRARESQUERDA" > 
	| < SETPENCOLOR : "CORCANETA" >
	| < SETPENUSE   : "USARCANETA" >
	| < COLOR  	    : "COR" >
	| < DRAW  	    : "DESENHE" >
}

TOKEN : /* SEPARATORS */
{
	  < LPAREN : "(" >
	| < RPAREN : ")" >
	| < COMMA  : "," >
}

Programa entrada() :
{
  Programa retorno;
}
{
  retorno = PPrograma() < EOF >
  {
    return retorno;
  }
}

Programa PPrograma() :
{
  Expressao retorno;
}
{
  retorno = PExpressao()
  {
    return new Programa(retorno);
  }
}

Expressao PExpressao() :
{
	Expressao retorno;  
}
{
  	retorno = PExpressaoUnaria() 
	{		return retorno;
	}}

ExpressaoUnaria PExpressaoUnaria() :
{
  	Expressao retorno;
}
{
	retorno = PAcao()	
  {
    return new Acao();
  }
}

Acao PAcao() :
{
	Token t1;
	Token t2;
	String output = "";
}
{
	(
		t1 = < FORWARD >
		t2 = < INTEGER_LITERAL >
		{output += t1.image + " " + t2.image;}
		|
		t1 = < BACK >
		t2 = < INTEGER_LITERAL >
		{output += t1.image + " " + t2.image;}
		|
		t1 = < RIGHT >
		t2 = < INTEGER_LITERAL >
		{output += t1.image + " " + t2.image;}
		|
		t1 = < LEFT >
		t2 = < INTEGER_LITERAL >
		{output += t1.image + " " + t2.image;}
		|
		t1 = < SETPENCOLOR >
		t2 = < INTEGER_LITERAL >
		{output += t1.image + " " + t2.image;}
		|
		t1 = < SETPENUSE >
		t2 = < INTEGER_LITERAL >
		{output += t1.image + " " + t2.image;}
	)*
	{		System.out.println(output);
	    return new Acao();
	}
}
options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(ProgrameBrincandoParser)

package plp.programebrincando.parser;

import plp.programebrincando.*;
import plp.programebrincando.expression.*;

public class ProgrameBrincandoParser
{
  public static void main(String args []) throws ParseException
  {
    ProgrameBrincandoParser parser;
    if (args.length == 0)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Reading from standard input . . .");
      parser = new ProgrameBrincandoParser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Reading from file " + args [0] + " . . .");
      try
      {
        parser = new ProgrameBrincandoParser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Java Parser Version 1.0.2:  File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Usage is one of:");
      System.out.println("         java ProgrameBrincandoParser < inputfile");
      System.out.println("OR");
      System.out.println("         java ProgrameBrincandoParser inputfile");
      return;
    }
    try
    {
      Programa programa = parser.entrada();
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  ProgrameBrincando program parsed successfully.");
//      if (!programa.checaTipo())//      {//        System.out.println("Erro de tipo");//      }//      else//      {//        programa.executar();//      }//        programa.executar();
    }
    catch (ParseException e)
    {
      System.out.println("Programe Brincando PLP Parser Version 0.0.1:  Encountered errors during parse.");
    }
  }
}

PARSER_END(ProgrameBrincandoParser)

SKIP : /* WHITE SPACE */
{
  	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
	| "\r\n"
}

TOKEN : /* PRIMITIVES */
{
	< INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  	| < HEX_LITERAL > ([ "l", "L" ])?
  	| < OCTAL_LITERAL > ([ "l", "L" ])? >
	| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
	| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
	| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
	| < STRING_LITERAL :
	    "\""
	    (
	      (~[ "\"", "\\", "\n", "\r" ])
	    |
	      (
	        "\\"
	        (
	          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
	        | [ "0"-"7" ] ([ "0"-"7" ])?
	        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
	        )
	      )
	    )*
	    "\"" >
	| <CHARACTER_LITERAL : "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
	| < TRUE  : "VERDADEIRO" >
	| < FALSE : "FALSO" >
}

TOKEN : /* EXPRESSIONS OPERATORS */
{
	  < PLUS  : "+" >
	| < EQUAL : "==" >
	| < GT    : ">" >
	| < LT    : "<" >
	| < GTE   : ">=" >
	| < LTE   : "<=" >
	| < UNION : "JUNTA" >
	| < NOT   : "NAO" >
}

TOKEN : /* PROGRAMEBRINCANDO LANGUAGE */
{
	  < LEARN       : "APRENDA" >
	| < ENDLEARN    : "FIMAPRENDA" >
	| < REPEAT      : "REPETIR" >
	| < ENDREPEAT   : "FIMREPETIR" >
	| < IF          : "SE" >
	| < THEN        : "FACA" >
	| < ELSE        : "SENAOFACA" >
	| < ENDIF       : "FIMSE" >
	| < FORWARD     : "PARAFRENTE" > 
	| < BACK 	    : "PARATRAS" > 
	| < RIGHT       : "GIRARDIREITA" > 
	| < LEFT        : "GIRARESQUERDA" > 
	| < SETPENCOLOR : "CORCANETA" >
	| < SETPENUSE   : "USARCANETA" >
	| < COLOR  	    : "COR" >
	| < DRAW  	    : "DESENHE" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >
| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >
}

TOKEN : /* SEPARATORS */
{
	  < LPAREN : "(" >
	| < RPAREN : ")" >
	| < COMMA  : "," >
	| < SEMICOLON  : ";" >
}

Programa entrada() :
{
  Programa retorno;
}
{
  retorno = PPrograma() < EOF >
  {
    return retorno;
  }
}

Programa PPrograma() :
{
  Expressao retorno;
}
{
  retorno = PExpressao()
  {
    return new Programa(retorno);
  }
}

Expressao PExpressao() :
{
	Expressao retorno;  
}
{
 	(
		LOOKAHEAD (PExpressaoSimples() <SEMICOLON>)
		retorno = PSequenciaExpressao()
	   	|
      	retorno = PExpressaoSimples()
 	)
	{		return retorno;
	}}

SequenciaExpressao PSequenciaExpressao() :
{
	Expressao expressao1 = null;  
	Expressao expressao2 = null;  
}
{
	expressao1 = PExpressaoSimples()
	<SEMICOLON>
	expressao2 = PExpressao()

	{
		return new SequenciaExpressao(expressao1, expressao2);
	}
}

Expressao PExpressaoSimples() :
{
	Expressao retorno;
}
{
    (
    	retorno = PValor()
      	|
      	retorno = PExpressaoUnaria()
//     	|
//     	retorno = PExpressaoBinaria()       	|
      	retorno = PDeclaracao()
     	| //      	retorno = PExecucao()//      	|
      	retorno = PIfThenElse()
      	|
      	retorno = PFor()
      	|
      	retorno = PId()
   	)
    {
        return retorno;
    }
}

Valor PValor():
{
	Valor retorno;}
{
	retorno = PValorConcreto()
	{
		return retorno;	  	}}

Valor PValorConcreto() :
{	Valor retorno;
}
{
	(		retorno = PValorInteiro()
		|
		retorno = PValorBooleano()
		|
		retorno = PValorCor()
	)
	{
	  return retorno;	}
}

Valor PValorInteiro():
{
	Token token;
}
{
	token = <INTEGER_LITERAL>
	{
		return new ValorInteiro(Integer.parseInt(token.toString()));
	}
}

Valor PValorBooleano() :
{
}
{
	<FALSE> { return new ValorBooleano(false); } 
	|
	<TRUE>  { return new ValorBooleano(true); }
}

Valor PValorCor() :
{
	Token token1;  	Token token2;  	Token token3;  }
{
	
	<COLOR>
	<LPAREN>
	token1 = <INTEGER_LITERAL>
	<COMMA>
	token2 = <INTEGER_LITERAL>
	<COMMA>
	token3 = <INTEGER_LITERAL>
	<RPAREN>

	{	  return new ValorCor(Integer.parseInt(token1.toString()), Integer.parseInt(token2.toString()), Integer.parseInt(token3.toString()));
	}   }

Expressao PExpressaoUnaria() :
{
  	Expressao retorno;
}
{
	retorno = PAcao()	
  {
    return retorno;
  }
}

Expressao PAcao() :
{
 	Expressao retorno = null;
	Valor valor;
}
{
	(
		< FORWARD >
		valor = PValorInteiro()
		{
			retorno = new ForwardMovement(valor);
		}
		|
		< BACK >
		valor = PValorInteiro()
		{
			retorno = new BackMovement(valor);
		}
		|
		< RIGHT >
		valor = PValorInteiro()
		{
			retorno = new RightMovement(valor);
		}
		|
		< LEFT >
		valor = PValorInteiro()
		{
			retorno = new LeftMovement(valor);
		}
		|
		< SETPENCOLOR >
		valor = PValorCor()
		{
			retorno = new SetPenColor(valor);
		}
		|
		< SETPENUSE >
		valor = PValorBooleano()
		{
			retorno = new SetPenUse(valor);
		}
	)
	{	    return retorno;
	}
}

//Expressao PExpressaoBinaria() ://{//	Expressao retorno = null;  //}//{//	(//		retorno = PExpressaoSoma()//		|//		retorno = PExpressaoIgual()////		|////		retorno = PExpressaoMaiorQue()////		|////		retorno = PExpressaoMenorQue()////		|////		retorno = PExpressaoMaiorIgualQue()////		|////		retorno = PExpressaoMenorIgualQue()////		|////		retorno = PExpressaoJunta()        //	)////	{//		return retorno;//	}//}

//ExpressaoBinaria PExpressaoSoma() : //{//	Expressao expressaoEsquerda;//	Expressao expressaoDireita;//	Expressao retorno = null;//}//{//	(//		expressaoEsquerda = PExpressao()//		< PLUS >//		expressaoDireita = PExpressao()//	)//	{//		retorno = new ExpressaoSoma(expressaoEsquerda, expressaoDireita);//		return retorno;//	} 	 	//}////Expressao PExpressaoIgual()://{//	Expressao expressaoEsquerda;//	Expressao expressaoDireita;//	Expressao retorno = null;//}//{//  	(//  		expressaoEsquerda = PExpressao()//  		< EQUAL >//  		expressaoDireita = PExpressao()//  	)//	{//		retorno = new ExpressaoIgual(expressaoEsquerda, expressaoDireita);//	}//}

Declaracao PDeclaracao() :
{
	Id id = null;
	Expressao expressao = null;
	ListaParametros listaParametros = null;  }
{
	< LEARN > id = PId() < LPAREN > listaParametros = PListaParametros() < RPAREN > expressao = PExpressao() < ENDLEARN >
	{		return new Declaracao(id, listaParametros, expressao);
	}
}

ListaParametros PListaParametros():
{
	Id id;
	ListaParametros lista = null;
}
{
	[  
		id = PId() 
		{
			lista = new ListaParametros(id);
		}
	] 
	( <COMMA> 
		id = PId() 
		{
			lista = new ListaParametros(id, lista);
		} 
	)*
	
	{
		if (lista == null) {
			lista = new ListaParametros();
		}	
		return lista;
	}
}

IfThenElse PIfThenElse() :
{
	Expressao expressao;
	Expressao expressaoThen;
	Expressao expressaoElse;
}
{
	<IF>
		expressao = PExpressao()
	<THEN>
		expressaoThen = PExpressao()
	<ELSE>
		expressaoElse = PExpressao()
	< ENDIF >
	{
		return new IfThenElse (expressao, expressaoThen, expressaoElse);
	}
}

For PFor() :
{
	Expressao expressaoLoop;
	Expressao expressaoExecucao;  
}
{
	< REPEAT > expressaoLoop = PExpressao() < COMMA > expressaoExecucao = PExpressao() < ENDREPEAT >
	{		return new For(expressaoLoop, expressaoExecucao);
	}
}

Id PId() :
{
	Token token;
}
{
  	//TODO Verificar que porra t√° pegando no id. 
	token = <IDENTIFIER>
	{
		return new Id(token.toString());
	}
}
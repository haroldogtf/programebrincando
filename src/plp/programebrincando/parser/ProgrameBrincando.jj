options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(ProgrameBrincandoParser)

package plp.programebrincando.parser;

import plp.programebrincando.*;
import plp.programebrincando.command.*;
import plp.programebrincando.command.action.*;
import plp.programebrincando.command.declaration.*;
import plp.programebrincando.expression.*;
import plp.programebrincando.expression.binary.*;
import plp.programebrincando.expression.value.*;
import plp.programebrincando.memory.*;

public class ProgrameBrincandoParser
{
  public static void main(String args []) throws ParseException
  {
    ProgrameBrincandoParser parser;
    if (args.length == 0)
    {
      System.out.println("Programe Brincando Parser:  Lendo de entrada padrao...");
      parser = new ProgrameBrincandoParser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Programe Brincando Parser: Lendo do arquivo " + args [0] + "...");
      try
      {
        parser = new ProgrameBrincandoParser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Programe Brincando Parser: Arquivo " + args [0] + " nao encontrado.");
        return;
      }
    }
    else
    {
      System.out.println("Programe Brincando Parse:  Usage is one of:");
      System.out.println("         java ProgrameBrincandoParser < inputfile");
      System.out.println("ou");
      System.out.println("         java ProgrameBrincandoParser inputfile");
      return;
    }

    try {
        Programa programa = parser.entrada();
        System.out.println("Programe Brincando Parser parsed successfully.");
        
        if(programa.checaTipo(new ContextoCompilacao())) {
            programa.executar(new ContextoExecucao());
        }
        else {
            System.out.println("Erro de tipo");
        }
    }catch (ParseException e){
      System.out.println("Programe Brincando Parser: Erros encontrados durante o parse do programa.");
      e.printStackTrace();
    }
  }
}

PARSER_END(ProgrameBrincandoParser)

SKIP : /* WHITE SPACE */
{
  	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
	| "\r\n"
}

TOKEN : /* PRIMITIVES */
{
	< INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  	| < HEX_LITERAL > ([ "l", "L" ])?
  	| < OCTAL_LITERAL > ([ "l", "L" ])? >
	| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
	| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
	| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
	| < STRING_LITERAL :
	    "\""
	    (
	      (~[ "\"", "\\", "\n", "\r" ])
	    |
	      (
	        "\\"
	        (
	          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
	        | [ "0"-"7" ] ([ "0"-"7" ])?
	        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
	        )
	      )
	    )*
	    "\"" >
	| <CHARACTER_LITERAL : "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
	| < TRUE  : "VERDADEIRO" >
	| < FALSE : "FALSO" >
}

TOKEN : /* EXPRESSIONS OPERATORS */
{
	  < PLUS   : "+"  >
	| < MINUS  : "-"  >  
	| < ASSIGN : "="  >
	| < EQUAL  : "==" >
	| < GT     : ">"  >
	| < LT     : "<"  >
	| < GTE    : ">=" >
	| < LTE    : "<=" >
	| < UNION  : "JUNTA" >
}

TOKEN : /* PROGRAMEBRINCANDO LANGUAGE */
{
	  < LEARN       : "APRENDA" >
	| < ENDLEARN    : "FIMAPRENDA" >
	| < REPEAT      : "REPETIR" >
	| < ENDREPEAT   : "FIMREPETIR" >
	| < IF          : "SE" >
	| < THEN        : "FACA" >
	| < ELSE        : "SENAOFACA" >
	| < ENDIF       : "FIMSE" >
	| < FORWARD     : "PARAFRENTE" > 
	| < BACK 	    : "PARATRAS" > 
	| < RIGHT       : "GIRARDIREITA" > 
	| < LEFT        : "GIRARESQUERDA" > 
	| < SETPENCOLOR : "CORCANETA" >
	| < SETPENUSE   : "USARCANETA" >
	| < COLOR  	    : "COR" >
	| < DRAW  	    : "DESENHE" >
	| < VAR  	    : "VAR" >
}

TOKEN : /* SEPARATORS */
{
	  < LPAREN : "(" >
	| < RPAREN : ")" >
	| < COMMA  : "," >
	| < SEMICOLON  : ";" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
	| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >
	| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >
}

Programa entrada() :
{
  Programa retorno;
}
{
  retorno = PPrograma() < EOF >
  {
    return retorno;
  }
}

Programa PPrograma() :
{
  Comando retorno;
}
{
  retorno = PComando()
  {
    return new Programa(retorno);
  }
}

Comando PComando() :
{
	Comando retorno;  
}
{
 	(
		LOOKAHEAD (PComandoSimples() <SEMICOLON>)		retorno = PSequenciaComando()	   	|      	retorno = PComandoSimples() 	)
	{
		return retorno;
	}
}

Comando PComandoSimples() :
{
	Comando retorno;
}
{
    (
		retorno = PDeclaracao()
		|
		retorno = PAtribuicao()
		|
		retorno = PAplicacao()
		|
		retorno = PIfThenElse()
		|
		retorno = PFor()
		|
		retorno = PAcao() 
   	)
    {
        return retorno;
    }
}

SequenciaComando PSequenciaComando() :
{
	Comando comando1 = null;  
	Comando comando2 = null;  
}
{
	comando1 = PComandoSimples()
	<SEMICOLON>
	comando2 = PComando()

	{
		return new SequenciaComando(comando1, comando1);
	}
}

Declaracao PDeclaracao() :
{
	Declaracao retorno;
}
{
    (
		retorno = PDeclaracaoVariavel()
		|
		retorno = PDeclaracaoProcedimento()
   	)
    {
        return retorno;
    }
}

DeclaracaoVariavel PDeclaracaoVariavel() :
{
  	Id id;
	Expressao expressao;
}
{
    (
		< VAR >
			id = PId()
		< ASSIGN >
			expressao = PExpressao()
   	)
    {
        return new DeclaracaoVariavel(id, expressao);
    }
}

DeclaracaoProcedimento PDeclaracaoProcedimento():
{
	Id nome;
	DefinicaoProcedimento definicaoProcedimento;
}
{
    (
      LOOKAHEAD(<LEARN> PId() <LPAREN> <RPAREN> <ENDLEARN>)
    	<LEARN> nome = PId() definicaoProcedimento = PDefinicaoProcedimento()<ENDLEARN>
    	|
    	<LEARN> nome = PId() <LPAREN> definicaoProcedimento = PDefinicaoProcedimento()<ENDLEARN>
    )
	{
	    return new DeclaracaoProcedimento (nome, definicaoProcedimento);
	}
}

DefinicaoProcedimento PDefinicaoProcedimento():
{
	ListaDeclaracaoProcedimentoParametro listaParametros = null;
	Comando comando = null;
}
{
    (
		<LPAREN> <RPAREN> comando = PComando()
	   	| listaParametros = PListaDeclaracaoProcedimentoParametro() <RPAREN> comando = PComando()
    )
	{
	    if(listaParametros == null) {
	        listaParametros = new ListaDeclaracaoProcedimentoParametro();
	    }
	    return new DefinicaoProcedimento (listaParametros, comando);
	}
	
}

ListaDeclaracaoProcedimentoParametro PListaDeclaracaoProcedimentoParametro():
{
	Id id;
	ListaDeclaracaoProcedimentoParametro lista = null;
}
{
	[  
		id = PId() 
		{lista = new ListaDeclaracaoProcedimentoParametro(new DeclaracaoParametro(id));}
	]
	( <COMMA> 
		id = PId() 
		{lista = new ListaDeclaracaoProcedimentoParametro(new DeclaracaoParametro(id), lista);} 
	)*
	{
		if (lista == null) {
			lista = new ListaDeclaracaoProcedimentoParametro();
		}	
		return lista;
	}
}

Atribuicao PAtribuicao() :
{
  	Id id;
	Expressao expressao;
}
{
    (
 		id = PId()
		< ASSIGN >
		expressao = PExpressao()
   	)
    {
        return new Atribuicao(id, expressao);
    }
}

Aplicacao PAplicacao() :
{
	Id id = null;
	ListaExpressao listaExpressao = null;  
}
{
	<DRAW>
		id = PId()
	<LPAREN>
		listaExpressao = PListaExpressao()
	<RPAREN>
	{
		return new Aplicacao(id, listaExpressao);
	}
}

ListaExpressao PListaExpressao():
{
	Expressao expressao;
	ListaExpressao lista = null;
}
{
	[
		expressao = PExpressao() 
	 	{
	 	  lista = new ListaExpressao(expressao);
		}
 	]
	( <COMMA> 
		expressao = PExpressao() 
		{
			lista = new ListaExpressao(expressao, lista);
		} 
	)*
	{
		if (lista == null) {
			lista = new ListaExpressao();
		} 
		return lista;
	}
}
	
IfThenElse PIfThenElse() :
{
	Expressao expressao;
	Comando comandoThen;
	Comando comandoElse;
}
{
	<IF>
		expressao = PExpressao()
	<THEN>
		comandoThen = PComando()
	<ELSE>
		comandoElse = PComando()
	<ENDIF>
	{
		return new IfThenElse (expressao, comandoThen, comandoElse);
	}
}

For PFor() :
{
	Expressao expressaoLoop;
	Comando comandoExecucao;  
}
{
	<REPEAT>
		expressaoLoop = PExpressao()
	<COMMA>
		comandoExecucao = PComando()
	<ENDREPEAT>
	{
		return new For(expressaoLoop, comandoExecucao);
	}
}

Comando PAcao() :
{
 	Comando retorno = null;
	Valor valor;
}
{
	(
		< FORWARD >
		valor = PValorInteiro()
		{
			retorno = new ActionForward(valor);
		}
		|
		< BACK >
		valor = PValorInteiro()
		{
			retorno = new ActionBack(valor);
		}
		|
		< RIGHT >
		valor = PValorInteiro()
		{
			retorno = new ActionRight(valor);
		}
		|
		< LEFT >
		valor = PValorInteiro()
		{
			retorno = new ActionLeft(valor);
		}
		|
		< SETPENCOLOR >
		valor = PValorCor()
		{
			retorno = new ActionSetPenColor(valor);
		}
		|
		< SETPENUSE >
		valor = PValorBooleano()
		{
			retorno = new ActionSetPenUse(valor);
		}
	)
	{
	    return retorno;
	}
}

Expressao PExpressao() :
{
	Expressao retorno;
}
{
	(
	   	LOOKAHEAD (PExpressaoSimples() (<PLUS> | <EQUAL> | <GT> | <LT> | <GTE> | <LTE> | <UNION>))
		retorno = PExpressaoBinaria()
	   	|
      	retorno = PExpressaoSimples()
   	)
    {
        return retorno;
    }
}

Expressao PExpressaoSimples() :
{
	Expressao retorno;
}
{
    (
		retorno = PValor()
		|
		retorno = PId()
   	)
    {
        return retorno;
    }
}
		
Expressao PExpressaoBinaria() :
{
	Expressao retorno;
}
{
  	(
	   	LOOKAHEAD (PExpressaoSimples() <PLUS>)
		retorno = PExpressaoSoma()
		|
	  	LOOKAHEAD (PExpressaoSimples() <EQUAL>)
		retorno = PExpressaoIgual()
		|
	  	LOOKAHEAD (PExpressaoSimples() <GT>)
		retorno = PExpressaoMaiorQue()
		|
	  	LOOKAHEAD (PExpressaoSimples() <LT>)
		retorno = PExpressaoMenorQue()
		|
	  	LOOKAHEAD (PExpressaoSimples() <GTE>)
		retorno = PExpressaoMaiorIgualQue()
		|
	  	LOOKAHEAD (PExpressaoSimples() <LTE>)
		retorno = PExpressaoMenorIgualQue()
		|
	  	LOOKAHEAD (PExpressaoSimples() <UNION>)
		retorno = PExpressaoJunta()
	)
	{
		return retorno;
	}
}

Expressao PExpressaoSoma() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<PLUS>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoSoma(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Expressao PExpressaoSubtracao() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<MINUS>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoSubtracao(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Expressao PExpressaoIgual() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<EQUAL>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoIgual(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Expressao PExpressaoMaiorQue() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<GT>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoMaiorQue(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Expressao PExpressaoMenorQue() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<LT>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoMenorQue(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Expressao PExpressaoMaiorIgualQue() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<GTE>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoMaiorIgualQue(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Expressao PExpressaoMenorIgualQue() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<LTE>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoMenorIgualQue(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Expressao PExpressaoJunta() : 
{
	Expressao expressaoEsquerda;
	Expressao expressaoDireita;
	Expressao retorno = null;
}
{
	(
		expressaoEsquerda = PExpressaoSimples()
		<UNION>
		expressaoDireita = PExpressao()
	)
	{
		retorno = new ExpressaoJunta(expressaoEsquerda, expressaoDireita);
		return retorno;
	} 	 	
}

Valor PValor():
{
	Valor retorno;
}
{
	retorno = PValorConcreto()
	{
		return retorno;   
	}
}

Valor PValorConcreto() :
{
	Valor retorno;
}
{
	(
		retorno = PValorInteiro()
		|
		retorno = PValorBooleano()
		|
		retorno = PValorCor()
	)
	{
		return retorno;
	}
}

Valor PValorInteiro():
{
	Token token;
}
{
	token = <INTEGER_LITERAL>
	{
		return new ValorInteiro(Integer.parseInt(token.toString()));
	}
}

Valor PValorBooleano() :
{
}
{
	<FALSE> { return new ValorBooleano(false); } 
	|
	<TRUE>  { return new ValorBooleano(true); }
}

Valor PValorCor() :
{
	Token token1;  
	Token token2;  
	Token token3;  
}
{
	<COLOR>
	<LPAREN>
		token1 = <INTEGER_LITERAL>
	<COMMA>
		token2 = <INTEGER_LITERAL>
	<COMMA>
		token3 = <INTEGER_LITERAL>
	<RPAREN>
	{
		Color color = new Color(Integer.parseInt(token1.toString()), Integer.parseInt(token2.toString()), Integer.parseInt(token3.toString()));
		return new ValorCor(color);
	}   
}

Id PId() :
{
	Token token;
}
{
	token = <IDENTIFIER>
	{
		return new Id(token.toString());
	}
}